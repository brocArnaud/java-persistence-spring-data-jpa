#parse("include/java_header.vm")

import org.springframework.beans.BeansException;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 * Utility class designed to provide the implementation of a given interface.
 * <br>
 * The implementation class name is determined using a "pattern" that must be
 * given to the constructor.<br>
 * 
 * @author Telosys
 *
 */
public class ImplementationProviderSpring {

	private final String pattern;

	/**
	 * Constructor <br>
	 * 
	 * @param pattern
	 *            the implementation class name pattern (supposed to contain 2 "%s")
	 *            <br>
	 *            for example "%s.impl.jdbc.%sImpl" where <br>
	 *            the first "%s" will be replaced by the interface package name <br>
	 *            the second "%s" will be replaced by the interface simple class
	 *            name <br>
	 */
	public ImplementationProviderSpring(String pattern) {
		super();
		this.pattern = pattern;
	}

	/**
	 * Returns a service instance implementing the given interface
	 * 
	 * @param interfaceClass
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public final <T> T getServiceInstance(Class<T> interfaceClass) {
		Class<?> serviceImplementationClass = null;
		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		try {
			serviceImplementationClass = Class.forName(buildImplementationClassName(interfaceClass));
			// WARNING : si on ferme l'application contexte comme demander par eclipse, l'application ne fonctionne plus car sont contexte est detruit!
			return (T) ctx.getBean(serviceImplementationClass);
		} catch (BeansException | ClassNotFoundException | ClassCastException e) {
			ctx.close();
			throw new RuntimeException("Cannot load class : " + serviceImplementationClass, e);
		}
	}

	/**
	 * Builds the service implementation full class name from the given interface
	 * class name
	 * 
	 * @param interfaceClass
	 * @return
	 */
	private final String buildImplementationClassName(Class<?> interfaceClass) {

		Package interfacePackage = interfaceClass.getPackage();
		String interfacePackageName = interfacePackage != null ? interfacePackage.getName() : "";
		String interfaceSimpleName = interfaceClass.getSimpleName();

		String result = String.format(pattern, interfacePackageName, interfaceSimpleName);
		return result;
	}

}
